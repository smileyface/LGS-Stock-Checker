services:
  backend:
    build:
      context: .
      dockerfile: LGS_Stock_Backend/Dockerfile
    container_name: lgs-stock-checker-backend-1
    restart: unless-stopped
    environment:
      # LOG_LEVEL is inherited from the shell environment where docker-compose is run.
      # The deploy.sh script sets and exports this variable.
      - LOG_LEVEL
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://lgs_user:lgs_password@db:5432/lgs_stock_checker
      - CORS_ALLOWED_ORIGINS=http://localhost:8000,http://192.168.1.120:8000
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - stock-net

  frontend:
    build:
      context: .
      dockerfile: LGS_Stock_Frontend/Dockerfile
    container_name: lgs-stock-checker-frontend-1
    restart: unless-stopped
    ports:
      - "0.0.0.0:8000:80"
    depends_on:
      - backend
    networks:
      - stock-net

  worker:
    build:
      context: .
      dockerfile: LGS_Stock_Backend/Dockerfile
    container_name: lgs-stock-checker-worker-1
    restart: unless-stopped
    command: [ "python", "worker_entrypoint.py" ]
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      # LOG_LEVEL is inherited from the shell environment where docker-compose is run.
      # The deploy.sh script sets and exports this variable.
      - LOG_LEVEL
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://lgs_user:lgs_password@db:5432/lgs_stock_checker
    networks:
      - stock-net

  redis:
    image: "redis:6.2-alpine" # Using a specific version is good practice
    container_name: lgs-stock-checker-redis-1
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stock-net

  db:
    image: postgres:15
    container_name: lgs-stock-checker-db-1
    restart: always
    environment:
      POSTGRES_USER: lgs_user
      POSTGRES_PASSWORD: lgs_password
      POSTGRES_DB: lgs_stock_checker
      # This variable is used by psql in the healthcheck to provide the password.
      PGPASSWORD: lgs_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - stock-net
    healthcheck:
      # This is a more robust check that verifies the app's user can connect and run a query.
      test: [ "CMD-SHELL", "psql -U lgs_user -d lgs_stock_checker -c 'SELECT 1'" ]
      interval: 10s
      timeout: 5s
      retries: 5
      # Add a start_period to give the database time to initialize on slow hardware.
      start_period: 30s

networks:
  stock-net:
    driver: bridge

volumes:
  postgres_data: # For PostgreSQL
