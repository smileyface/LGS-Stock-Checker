# Define a reusable environment block for all backend services
x-common-backend-env:
  # LOG_LEVEL is inherited from the shell environment where docker-compose is run.
  # The deploy.sh script sets and exports this variable.
  # Add the path where pip installs executables to the container's PATH
  # The default PATH in the python:3.9-slim image already includes /usr/local/bin,
  # so we don't need to modify it. We'll keep the anchor for other variables.
  &common-backend-env
  LOG_LEVEL: ${LOG_LEVEL:-INFO}
  REDIS_HOST: redis
  FLASK_CONFIG: production
  REDIS_PORT: 6379
  REDIS_URL: redis://redis:6379
  DATABASE_URL: postgresql://lgs_user:lgs_password@db:5432/lgs_stock_checker
  # Default origins for local dev. The SERVER_IP is for remote access and is set by deploy.sh
  CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://192.168.1.120:8000,http://localhost:8000,http://localhost:5173}
  PATH: /usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

services:
  backend:
    build:
      context: .
      dockerfile: LGS_Stock_Backend/Dockerfile
    container_name: lgs-stock-checker-backend-1
    restart: unless-stopped
    # Allow Gunicorn up to 130s to finish requests and shut down gracefully.
    stop_grace_period: 130s
    environment: *common-backend-env
    # NOTE: Temporarily set to 1 worker to avoid multi-process initialization issues.
    # The long-term solution is to refactor app initialization using Gunicorn hooks (e.g., post_fork)
    # to create connections within each worker, rather than in the master process.
    command: [ "gunicorn", "--worker-class", "eventlet", "-w", "1", "--bind", "0.0.0.0:5000", "--timeout", "120", "server_entrypoint:app" ]
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    # Add a healthcheck to ensure the Gunicorn server is responsive.
    healthcheck:
      # This check verifies that the Gunicorn process is running and responding to HTTP.
      # It curls a non-existent path. If curl exits with code 22 (404 Not Found),
      # the server is up, so we exit with 0 (success). Otherwise, we exit with 1 (failure).
      test: [ "CMD-SHELL", "curl -f http://localhost:5000/api/this-path-does-not-exist; if [ $$? -eq 22 ]; then exit 0; else exit 1; fi" ]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - stock-net

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: lgs-stock-checker-frontend-1
    restart: unless-stopped
    ports:
      - "0.0.0.0:8000:80"
    depends_on:
      backend:
        condition: service_healthy # Wait for the backend to be fully ready
    networks:
      - stock-net

  worker:
    build:
      context: .
      dockerfile: LGS_Stock_Backend/Dockerfile
    container_name: lgs-stock-checker-worker-1
    restart: unless-stopped
    # Allow the worker up to 130s to finish its current job before being killed.
    stop_grace_period: 130s
    command: [ "python", "worker_entrypoint.py" ]
    depends_on:
      # The worker should wait for the main backend app to be healthy
      # to ensure all application components are initialized, and Redis for connection.
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    environment: *common-backend-env
    networks:
      - stock-net

  scheduler:
    build:
      context: .
      dockerfile: LGS_Stock_Backend/Dockerfile
    container_name: lgs-stock-checker-scheduler-1
    restart: unless-stopped
    # Give the scheduler time to unregister itself cleanly.
    stop_grace_period: 30s
    # Use the dedicated entrypoint to ensure tasks are registered before the scheduler starts.
    command: [ "python", "scheduler_entrypoint.py" ]
    depends_on:
      # and Redis/DB to be healthy.
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment: *common-backend-env
    networks:
      - stock-net

  redis:
    image: "redis:6.2-alpine" # Using a specific version is good practice
    container_name: lgs-stock-checker-redis-1
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stock-net

  db:
    image: postgres:15
    container_name: lgs-stock-checker-db-1
    restart: always
    environment:
      POSTGRES_USER: lgs_user
      POSTGRES_PASSWORD: lgs_password
      POSTGRES_DB: lgs_stock_checker
      # This variable is used by psql in the healthcheck to provide the password.
      PGPASSWORD: lgs_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432" # Expose PostgreSQL port to the host machine
    networks:
      - stock-net
    healthcheck:
      # This is a more robust check that verifies the app's user can connect and run a query.
      test: [ "CMD-SHELL", "psql -U lgs_user -d lgs_stock_checker -c 'SELECT 1'" ]
      interval: 10s
      timeout: 5s
      retries: 5
      # Add a start_period to give the database time to initialize on slow hardware.
      start_period: 30s

networks:
  stock-net:
    driver: bridge

volumes:
  postgres_data: # For PostgreSQL
